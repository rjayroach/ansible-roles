---
- name: Check if Hub binary exists
  stat:
    path: /usr/local/bin/hub
  register: hub_binary

- name: Get hub binary
  get_url:
    url: 'https://github.com/github/hub/releases/download/v{{ hub_version }}/hub-linux-amd64-{{ hub_version }}.tgz'
    dest: '{{ ansible_env.HOME }}/hub.tgz'
  when: hub_binary.stat.exists == false
  register: new_archive

- name: Expand download
  unarchive:
    src: '{{ ansible_env.HOME }}/hub.tgz'
    dest: '{{ ansible_env.HOME }}'
    copy: no
  when: new_archive|changed

- name: Install Terraform
  command: install
    path: '{{ ansible_env.HOME }}/hub-linux-amd64-{{ hub_version }}'
  become: yes
  when: new_archive|changed

- name: Remove downloads
  file:
    path: '{{ ansible_env.HOME }}/{{ item }}'
    state: absent
  with_items:
    - 'hub-linux-amd64-{{ hub_version }}'
    - 'hub.tgz'
  when: new_archive|changed

- name: Insert aliases
  blockinfile:
    create: yes
    dest: ~/.zsh.after/aliases.zsh
    marker: '# {mark} ANSIBLE MANAGED BLOCK (git)'
    block: |
      alias gsu='git submodule update --remote --merge'

# Options:
# update: yes; when update is yes then the repo will be refreshed
# version: a specific branch to checkout; default is HEAD

- name: Checkout git repository
  git:
    repo: '{{ item.account }}/{{ item.name }}.git'
    dest: '{{ item.dir }}/{{ item.name }}'
    accept_hostkey: yes
    update: no #"{{ item.update | default(0) }}"
    version: "{{ item.version | default('HEAD') }}"
  with_items: '{{ repos }}'
