---
- name: Install Debian packages
  apt:
    name: '{{ item }}'
    state: present
    update_cache: yes
    cache_valid_time: 86400
  become: yes
  with_items: [libpq-dev, postgresql, postgresql-client, postgresql-contrib, python-psycopg2]
  when: ansible_distribution == 'Debian'

- name: Copy .inputrc to postgres home
  copy:
    src: inputrc
    dest: /var/lib/postgresql/.inputrc
  become: yes
  become_user: postgres
  when: ansible_distribution == 'Debian'

# NOTE: The location of config can be operating system dependent, e.g. ubuntu is diff from debian
- name: 'Listen on all interfaces to allow connection from docker'
  lineinfile:
    dest: /etc/postgresql/9.4/main/postgresql.conf
    line: listen_addresses = '*'
  become: yes
  notify: Restart PostgreSQL

- name: 'Create ROLE {{ database_username }} and grant dbcreate and superuser privileges'
  postgresql_user:
    name: '{{ database_username }}'
    password: '{{ database_password }}'
    role_attr_flags: 'SUPERUSER,CREATEDB'
  become: yes
  become_user: postgres

- name: 'Trust connections from docker IP'
  lineinfile:
    dest: /etc/postgresql/9.4/main/pg_hba.conf
    line: 'host    all         all         {{ postgres_permitted_network }}    trust'
  become: yes
  notify: Restart PostgreSQL

- name: Insert aliases
  blockinfile:
    create: yes
    dest: ~/.zsh.after/aliases.zsh
    marker: '# {mark} ANSIBLE MANAGED BLOCK (postgres)'
    block: |
      alias supg='sudo su - postgres'

      # Dump a schema named $2 from a database named $1
      pgd() {
        pg_dump $1 -n $2 | gzip -c > $1.sql.gz
      }
