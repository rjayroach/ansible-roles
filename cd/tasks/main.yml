# NOTE: Even with the patch to Ansible there is a bug with using
# variable substitution in the tasks_from of include_role
# therefore this is using when task_name == to call a hard coded task_name

# NOTE: If there is an error running this role it is most likely due
# to the source variable hash not being able to be merged due to a nil value somewhere
---
# - debug: msg=hello
# - debug: var=role_group
# - debug: var=task_name
# - debug: var=application
# - debug: var=roles
# - debug: var=role_properties
# - debug: msg='{{ role_properties[role_item] | default({}) }}'
#   with_items: '{{ roles }}'
#   loop_control:
#     loop_var: role_item
# - debug: msg='{{ role_item }}'
#   with_items: '{{ roles }}'
#   loop_control:
#     loop_var: role_item

- include_role:
    name: 'prepd/{{ role_item }}'
    tasks_from: config
  vars:
    properties: '{{ role_properties[role_item] | default({}) }}'
  with_items: '{{ roles }}'
  loop_control:
    loop_var: role_item
  when: task_name == 'config'

- include_role:
    name: 'prepd/{{ role_item }}'
    tasks_from: config-local
  vars:
    properties: '{{ role_properties[role_item] | default({}) }}'
  with_items: '{{ roles }}'
  loop_control:
    loop_var: role_item
  when: task_name == 'config-local'

- include_role:
    name: 'prepd/{{ role_item }}'
    tasks_from: deploy
  vars:
    properties: '{{ role_properties[role_item] | default({}) }}'
  with_items: '{{ roles }}'
  loop_control:
    loop_var: role_item
  when: task_name == 'deploy'

- include_role:
    name: 'prepd/{{ role_item }}'
    tasks_from: deploy-local
  vars:
    properties: '{{ role_properties[role_item] | default({}) }}'
  with_items: '{{ roles }}'
  loop_control:
    loop_var: role_item
  when: task_name == 'deploy-local'
