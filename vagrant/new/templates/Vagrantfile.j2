#jinja2: lstrip_blocks: True
Vagrant.configure(2) do |config|

{% if spec.ssh_username is defined %}
  config.ssh.forward_agent = true
  config.ssh.username = '{{ spec.ssh_username }}'
  config.ssh.private_key_path = '{{ spec.ssh_private_key_path }}'
{% endif %}

  config.vm.provider :virtualbox do |v|
    # v.memory = 2048
    # v.cpus = 1
    v.customize ['guestproperty', 'set', :id, '/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold', 10000 ]
    v.customize ['modifyvm', :id, '--nictype1', 'virtio']
    # v.customize ['modifyvm', :id, '--nic1', 'hostonly', '--nic2', 'nat']

    host = RbConfig::CONFIG["host_os"]
    if host =~ /darwin/ # OS X
      # sysctl returns bytes, convert to MB
      # allocate 1/8 (12.5%) of available physical memory to the VM
      v.memory = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 8
      v.cpus = 1 # `sysctl -n hw.physicalcpu`.to_i
    elsif host =~ /linux/ # Linux
      # TODO: Linux host not tested
      # meminfo returns kilobytes, convert to MB
      # v.memory = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 8
      v.cpus = `nproc`.to_i
    end
  end

{% for key, config in spec.machines.iteritems() %}
  config.vm.define '{{ key }}', autostart: {{ config.vm.autostart | default(false) | lower }} do |node|
    node.vm.provider :virtualbox do |v|
      v.name = '{{ key }}.{{ spec.domain }}'
    end

    node.vm.box = '{{ config.vm.box }}'
    node.vm.box_url = '{{ config.vm.box_url }}'

    # NFS directory mounts
    # NOTE: NFS exports cannot be nested; If there is an error, make sure that the attempted mounts here
    # are not subdirectories of an already NFS mounted directory in the directory tree
    node.vm.synced_folder '.', '/vagrant', disabled: true
  {% for name, mount in (config.mounts | default({})).iteritems() %}
    node.vm.synced_folder '{{ mount.host }}', '{{ mount.guest }}', type: 'nfs',
      mount_options: ['rw', 'vers=3', 'tcp'],
      linux__nfs_options: ['rw', 'no_subtree_check', 'all_squash', 'async']
  {% endfor %}

    # Networking
    node.vm.hostname = '{{ key }}.{{ spec.domain }}'
    node.vm.network :private_network, type: :dhcp, nic_type: 'virtio'

  {% if config.port_forwards is defined %}
    # Port Forwarding on vagrant interface
    {% for name, forward in config.port_forwards.iteritems() %}
    # {{ name }}
    node.vm.network 'forwarded_port', host: {{ forward.host }}, guest: {{ forward.guest }}, auto_correct: {{ forward.auto_correct | default(true) | lower }}
    {% endfor %}
  {% endif %}

    if Vagrant.has_plugin?('vagrant-hostmanager')
      # node.hostmanager.aliases = ["node#{i}.local"]
      node.hostmanager.ip_resolver = proc do |vm, resolving_vm|
        if hostname = (vm.ssh_info && vm.ssh_info[:host])
          `vagrant ssh {{ key }} -c "/sbin/ip addr show {{ config.ssh.interface }} | grep 'inet '"`.split[1].split('/')[0]
        end
      end
    end

  {% if config.ansible is defined %}
    # Ansible Provisioning
    config.vm.provision :ansible do |ansible|
      ansible.compatibility_mode = '2.0'
      {# }
      ansible.groups = {
    {% for group in config.ansible.groups %}
        '{{ group }}': ['{{ key }}']{{ ',' if not loop.last else '' }}
    {% endfor %}
      }
      ansible.playbook = '{{ config.ansible.playbook }}'
      { #}
      ansible.inventory_path = '{{ spec.inventory_path }}'
      ansible.playbook = 'vagrant.yml'
      # ansible.vault_password_file = vault_password_file if File.exists?(vault_password_file)
      # ansible.verbose = false # '-vvv'
    end
  {% endif %}
  end

{% endfor %}
  if Vagrant.has_plugin?('vagrant-hostmanager')
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
  end
{# }
  # if Vagrant.has_plugin?('vagrant-cachier')
  #   config.cache.scope = :box
  #   config.cache.auto_detect = false
  #   config.cache.enable :apt
  #   config.cache.synced_folder_opts = {
  #     owner: '_apt',
  #     group: '_apt'
  #   }
  # end
{ #}
end
