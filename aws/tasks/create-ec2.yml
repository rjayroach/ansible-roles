# TODO: IAM Users and SSL Cert uploads for use on ELBs
# TODO: Manage SSH Keys
# TODO: Manage Volume Mounts
---
- include_vars: '{{ aws.vpc_info_file }}'

- set_fact:
    env_tag: {env: '{{ c.env }}'}

# - debug: var=vpc
# - debug: var=sg_web
# - debug: var=c.ec2
# - debug: var=c.ec2s
# - debug: var=c.ec2s[0].instance_tags['c_role']
# - debug: var=vpc.security_group_ids[0] 

- name: Launch appservers
  ec2:
    assign_public_ip: "{{ item.assign_public_ip |default('no') }}"
    count_tag:
      role: "{{ item.instance_tags['c_role'] }}"
    exact_count: '{{ item.exact_count | default(1) }}'
    # TODO: Sort out the Security Group creating and writing to VPC info file
    group_id: '{{ vpc.security_group_ids[0] }}'
    # group_id: '{{ sg_web.group_id }}'
    key_name: '{{ c.ec2.key_name }}'  # Required
    image: '{{ item.image }}'  # Required
    instance_tags: '{{ item.instance_tags | combine(env_tag) }}'
    instance_type: "{{ item.instance_type | default('t2.micro') }}"
    region: '{{ c.region }}'  # Required
    volumes:
      - device_name: /dev/xvda
        volume_type: "{{ item.volume_type | default('gp2') }}"
        volume_size: '{{ item.volume_size | default(50) }}'
        delete_on_termination: "{{ item.delete_on_termination | default('yes') }}"
    # TODO: Subnets need to be more dynamic than this
    vpc_subnet_id: '{{ vpc.subnets.web_a }}'
    wait: yes
  register: ec2
  with_items: '{{ c.ec2s }}'
 
- debug: var=ec2
# - name: Add new instance to host group
#   add_host:
#     hostname: '{{ item.public_ip }}'
#     groupname: ami-builder
#   with_items: '{{ ec2.instances }}'

- name: Wait for SSH to come up
  wait_for:
    host: '{{ item.public_dns_name }}'
    port: 22
    delay: 60
    timeout: 320
    state: started
  with_items: '{{ ec2.instances }}'


# NOTE: maybe a task list_volumes.yml
# And include attach_volume.yml only when the volume is not present
# OR the task is called manage_volumes.yml then call it twice, e.g.:
# include: manage_volumes.yml, task=list
# include: manage_volumes.yml, task=add
# when: volume is not defined
# - include: attach_volume.yml

# - name: Start platform-test EC2 Instance if it is stopped
#   ec2_remote_facts:
#     region: '{{ region }}'
#     filters:
#       instance-state-name: running # stopped
#       "tag:Name": test ezlink reference implementation
#   register: stopped_ec2s
# 
# - set_fact:
#     instance_ids: "{{stopped_ec2s['instances']|map(attribute='id')|list}}"
# 
# - debug: var=instance_ids
# 
# - name: Start the sandbox instance
#   ec2:
#     instance_ids: '{{ instance_ids }}'
#     region: '{{ region }}'
#     state: running
#     wait: True
#     assign_public_ip: yes
